@model MovieTicketBooking.Models.Theater
@{
    ViewBag.Title = "Theater_detail";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var listroom = MovieTicketBooking.Dao.RoomDao.Instance().GetAllRoomsOfTheater(Model.theater_id);
    var listcity = MovieTicketBooking.Dao.TheaterDao.Instance().getAllCity();

}
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<style>


    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
    }

    .table-container {
        overflow-x: auto;
    }

    table {
        width: 100%;
        background-color: #0F021B;
        border: 1px solid #640EA1;
    }

    tr {
        border: 1px solid #640EA1;
    }

    thead th {
        background-color: #492173;
        font-weight: bold;
        text-transform: uppercase;
    }

    tbody tr:hover {
        background-color: #1A042D;
    }

    img {
        max-width: 200px;
        height: auto;
        display: block;
        margin: 0 auto;
        border-radius: 20px;
        margin-top: 10px;
        margin-bottom: 10px
    }



    .truncate-overflow {
        --max-lines: 5;
        position: relative;
        overflow: hidden;
        padding-right: 1rem;
        max-width: 20%;
    }



    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Adjust the opacity here */
        display: none;
        justify-content: center;
        align-items: center;
        /* Ensure the loading overlay stays on top */
    }

    .loader {
        border: 8px solid #f3f3f3; /* Light grey */
        border-top: 8px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
    }




        .loader.active {
            display: block;
        }

    input[type="text"],
    input[type="date"],
    input[type="number"],
    textarea,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        font-size: 16px;
        color: aliceblue;
        background-color: #2A3038;
    }

    textarea {
        resize: vertical;
    }

    input[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

    #imagePreview {
        
        display: none;
        margin-top: 37px;
      
        border-radius: 10px;
    }

    .grid-container {
        display: grid;
        gap: 2px;
        /* Adjust gap between squares */
    }

    .grid-item {
        background-color: lightblue;
        /* Adjust square color */
        border: 1px solid darkblue;
        /* Adjust square border */
    }
</style>
<div class="container">


    <div class="card mb-3" style="max-width: 100%;">
        <div class="row g-0">

            <div class="col-md-2">
                <img src="@Model.Theater_image" class="img-fluid rounded-start" alt="..." style="height:200px">
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title">@Model.name</h5>
                    <p class="card-text" style="color:aliceblue">@Model.location</p>

                </div>
            </div>
            <button class="btn btn-primary mdi mdi-border-color" data-bs-toggle="modal" data-bs-target="#exampleModal" style="width: 4%; height: 15%; top: 180px; position: absolute; right: 20px; color: #492173; background-color: #8f56cc;border:none"></button>
        </div>
    </div>
    <div class="modal fade" id="exampleModal" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Theater</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="Insertmovie" method="POST" enctype="multipart/form-data">
                        <div style="display: flex; justify-content: space-between; flex-wrap: wrap;">
                            <div style="flex-basis: calc(50% - 10px); margin-right: 20px;">

                                <label for="director">Location:</label>
                                <input type="text" id="location" name="location" value="@Model.location" required>

                                <label for="director">City:</label>
                                <div class="form-group">

                                    <select class="form-control" id="country" name="city">

                                        @for (int i = 0; i < listcity.Count; i++)
                                        {
                                            if (listcity[i].id_city != Model.city_id)
                                            {
                                                <option value="@listcity[i].id_city">@listcity[i].title_city</option>
                                            }
                                            else
                                            {
                                                <option value="@listcity[i].id_city" selected>@listcity[i].title_city</option>
                                            }
                                        }

                                    </select>
                                </div>
                                <label for="image"> Theater Image:</label>
                                <img src="@Model.Theater_image" />


                            </div>
                            <div style="flex-basis: calc(50% - 10px);">
                                <label for="title">Theater Name:</label>
                                <input type="text" id="theatername" name="theatername" value="@Model.name" required>

                                <label for="image"> Theater Image:</label>

                                <input type="file" id="image" name="image" accept="image/*" required onchange="previewImage(event)">
                                <img id="imagePreview" src="#" alt="Image Preview">

                                <input type="hidden" id="old_url" value="@Model.Theater_image" />

                                <input type="hidden" id="urlimagg" name="urlimagg" />
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" style="background-color: #8f56cc;border:none" onclick="abc()">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary btn-xs" style="margin-left: 15px; margin-bottom: 10px; color: #492173; background-color: #8f56cc; border: none" onclick="formaddroom()">Add Room </button>
    <div id="newtheater" style="display: none; background-color: #1e1e27e3; border-radius: 10px; padding: 10px; ">
        <h1>Add New Room</h1>
        <form method="post" action="/Theater/Addnewroom" enctype="multipart/form-data">
            <div>
                <div style="display:flex; justify-content:space-around">
                    <div>
                        <label for="title" style="margin-right:10px">Name:  </label>
                        <input type="text" id="roomname" name="roomname" style="width:300px" required>
                    </div>
                    <div>

                        <label for="director" style="margin-right:10px">Rows:  </label>
                        <input type="number" id="rowsInput" name="row" min="1" value="5" style="width:100px" required>

                        <label for="director" style="margin-right:10px;margin-left:20px">Columns:  </label>
                        <input type="number" id="columnsInput" name="colummn" min="1" value="5" style="width:100px" required>

                    </div>

                    <input name="theater_id" value="@Model.theater_id" type="hidden" />

                </div>
                <div>
                    <div class="grid-container" id="gridContainer">
                        <!-- JavaScript will populate the squares here -->
                    </div>
                </div>
            </div>
            <button class="upload btn btn-primary btn-icon-text" type="submit" style="margin-top: 30px; background-color: #8f56cc;border:none" id="btnsubmit"> <i class="mdi mdi-file-check btn-icon-prepend"></i>Add Room</button>

        </form>
    </div>
    <h3>List room in @Model.name</h3>
    <div>
        <table>
            <thead>
                <tr>
                    <th style="width:100px;text-align:center">No</th>
                    <th style="width:250px;text-align:center">Name</th>
                    <th style="width:150px;text-align:center">Chair number</th>
                    <th style="width:100px;text-align:center">Detail</th>

                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < listroom.Count; i++)
                {


                    <tr>
                        <td style="width:100px;text-align:center">@(i+1)</td>
                        <td style="width:250px  "><div style="width: 100%; word-wrap: break-word; text-align: center">@listroom[i].room_name</div></td>
                        <td style="width:150px;text-align:center">@(listroom[i].number_column * listroom[i].number_row)</td>

                        <td style="width:100px;text-align:center"><a href="#">Detail</a></td>

                    </tr>

                }


            </tbody>
        </table>
    </div>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loader"></div>
    </div>
</div>
<script>


    function formaddroom() {
        var x = document.getElementById("newtheater");

        if (x.style.display === "none") {
            x.style.display = "block";


        } else {
            x.style.display = "none";

        }
    }
    function createGrid() {
        // Get the values of rows and columns from input fields
        const rows = document.getElementById('rowsInput').value;
        const columns = document.getElementById('columnsInput').value;

        // Get the container where the grid will be placed
        const gridContainer = document.getElementById('gridContainer');

        // Clear previous grid if any
        gridContainer.innerHTML = '';

        // Create a table element
        if (columns < 23) {
            gridContainer.style.gridTemplateColumns = `repeat(${columns}, 50px)`;
            gridContainer.style.gridTemplateRows = `repeat(${rows}, 50px)`;
        } else {
            gridContainer.style.gridTemplateColumns = `repeat(${columns}, 40px)`;
            gridContainer.style.gridTemplateRows = `repeat(${rows}, 40px)`;
        }

        const totalSquares = columns * rows;

        for (let i = 0; i < totalSquares; i++) {
            const gridItem = document.createElement('input');
            gridItem.style.textAlign = "center";
            gridItem.style.width = "50px";
            gridItem.style.height = "50px";
            gridItem.value = "A" + i;
            gridItem.id = "A" + i;
            gridItem.readOnly = true;
            gridItem.classList.add('grid-item');
            gridContainer.appendChild(gridItem);
        }
    }

    // Add event listeners to input fields
    document.getElementById('rowsInput').addEventListener('change', createGrid);
    document.getElementById('columnsInput').addEventListener('change', createGrid);

    // Initially create the grid
    createGrid();
    function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function () {
            var imagePreview = document.getElementById('imagePreview');
            imagePreview.src = reader.result;
            imagePreview.style.display = 'block';
        }
        reader.readAsDataURL(event.target.files[0]);
    }
</script>
<script>
    const firebaseConfig = {
        apiKey: "AIzaSyAULQ0nHsGhEO9t2EPmZlHlvqKhyExSx_g",
        authDomain: "movieticketbooking-7da83.firebaseapp.com",
        projectId: "movieticketbooking-7da83",
        storageBucket: "movieticketbooking-7da83.appspot.com",
        messagingSenderId: "66263933934",
        appId: "1:66263933934:web:17a4eae96f357a8a1724ff",
        measurementId: "G-G4SKDMJYN5"
    };
    firebase.initializeApp(firebaseConfig);
    let urlPath = "";
    async function uploadImage() {
        const inp = document.querySelector('#image').files[0];
        const urll = document.querySelector('#urlimagg');

        const storage = firebase.storage();
        const ref = storage.ref();
        const metadata = {
            contentType: inp.type
        };


        const name = inp.name;
        const uploadImage = ref.child(name).put(inp, metadata);

        await uploadImage.then(snapshot => snapshot.ref.getDownloadURL())
            .then(url => {

                urll.value = url;
                urlPath = url;
                console.log(urlPath);


            });
        return urlPath;
    }
    function deleteImage() {
        const old_url = document.getElementById('old_url').value;
        const storage = firebase.storage();
        // Create a reference to the image you want to delete
        const imageRef = storage.refFromURL(old_url);

        // Delete the image
        imageRef.delete().then(() => {
            console.log("Image deleted successfully.");
        }).catch((error) => {
            console.error("Error deleting image:", error);
        });
    }

    async function abc() {

        document.getElementById('loadingOverlay').style.display = 'flex';
        const inp = document.querySelector('#image').files[0];
        if (inp != null) {
            await uploadImage();
            deleteImage();
            $.ajax({
                url: '/Theater/Edittheate',
                type: "Post",
                //contentType: "application/json",
                data: {
                    id_theater:@Model.theater_id,
                    theatername: $("#theatername").val(),
                    location: $("#location").val(),
                    city: $("#country").val(),
                    urlimag: $("#urlimagg").val(),
                },
                success: () => { window.location.replace("https://localhost:44351/theater/addnewtheater"); }
            });
        } else {
            $.ajax({
                url: '/Theater/Edittheate',
                type: "Post",
                //contentType: "application/json",
                data: {
                    id_theater:@Model.theater_id,
                    theatername: $("#theatername").val(),
                    location: $("#location").val(),
                    city: $("#country").val(),
                    urlimag: $("#old_url").val(),
                },
                success: () => { window.location.replace("https://localhost:44351/theater/addnewtheater"); }
            });
        }





    }

    //abc();
</script>
