
@{
    ViewBag.Title = "Addnewtheater";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    List<MovieTicketBooking.Models.Theater> listtheater = MovieTicketBooking.Dao.TheaterDao.Instance().getAllTheater();
}
@model List<MovieTicketBooking.Models.City>

<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>

<style>


    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
    }

    .table-container {
        overflow-x: auto;
    }

    table {
        width: 100%;
        background-color: #0F021B;
        border: 1px solid #640EA1;
    }

    tr {
        border: 1px solid #640EA1;
    }

    thead th {
        background-color: #492173;
        font-weight: bold;
        text-transform: uppercase;
    }

    tbody tr:hover {
        background-color: #1A042D;
    }

    img {
        max-width: 200px;
        height: auto;
        display: block;
        margin: 0 auto;
        border-radius: 20px;
        margin-top: 10px;
        margin-bottom: 10px
    }



    .truncate-overflow {
        --max-lines: 5;
        position: relative;
        overflow: hidden;
        padding-right: 1rem;
        max-width: 20%;
    }



    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Adjust the opacity here */
        display: none;
        justify-content: center;
        align-items: center;
        /* Ensure the loading overlay stays on top */
    }

    .loader {
        border: 8px solid #f3f3f3; /* Light grey */
        border-top: 8px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
    }




        .loader.active {
            display: block;
        }

    input[type="text"],
    input[type="date"],
    input[type="number"],
    textarea,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        font-size: 16px;
        color: aliceblue;
        background-color: #2A3038;
    }

    textarea {
        resize: vertical;
    }

    input[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

    #imagePreview {
        max-height: 200px;
        display: none;
        margin-top: 20px;
        margin-bottom: 5px;
        border-radius: 5px;
    }

    .pagination {
        margin-top: 20px; /* Adjust spacing as needed */
    }

        .pagination a {
            display: inline-block;
            padding: 5px 10px;
            margin-right: 5px;
            text-decoration: none;
            color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            transition: background-color 0.3s, color 0.3s;
        }

            .pagination a:hover {
                background-color: #f0f0f0;
            }

            .pagination a.active {
                background-color: #4c3896; /* Active page background color */
                color: #fff; /* Active page text color */
                border: none
            }

    .tabledatahead {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 20px 20px;
        background-color: #191c24;
        font-weight: bold;
        font-size: 18px
    }

    .tabledatabo {
        display: flex;
        height: auto;
        padding: 20px 20px;
        justify-content: space-evenly;
        align-items: center;
        font-size: 15px;
        background-color: #191c24;
        border-bottom: 1px solid grey;
    }

        .tabledatabo:hover {
            background-color: black
        }

    #searchInput {
        margin: 20px 0px;
        background-color: black;
        border: 1px solid grey;
        color: white;
        height: 40px;
        border-radius: 5px;
    }
</style>
<div class="container" style="height:700px; overflow-y:scroll">
    <button class="btn btn-primary btn-xs" style="margin-left: 15px; margin-bottom: 10px; background-color: #8f56cc;border:none" onclick="formaddtheater()">Add Theater </button>
    <div id="newtheater" style="display:none">
        <h1>Add New Theater</h1>
        <form action="Insertmovie" method="POST" enctype="multipart/form-data">
            <div style="display: flex; justify-content: space-between; flex-wrap: wrap;">
                <div style="flex-basis: calc(50% - 10px); margin-right: 20px;">
                    <label for="title">Theater Name:</label>
                    <input type="text" id="theatername" name="theatername" required>

                    <label for="director">Location:</label>
                    <input type="text" id="location" name="location" required>

                    <label for="director">City:</label>
                    <div class="form-group">
                        <select class="form-control" id="country" name="city" required>
                            <option value="">Select City</option>
                            @for (int i = 0; i < Model.Count; i++)
                            {
                                <option value="@Model[i].id_city">@Model[i].title_city</option>
                            }

                        </select>
                    </div>




                </div>
                <div style="flex-basis: calc(50% - 10px);">

                    <label for="image"> Theater Image:</label>
                    <input type="file" id="image" name="image" accept="image/*" required onchange="previewImage(event)">
                    <img id="imagePreview" src="#" alt="Image Preview">



                    <input type="hidden" id="urlimagg" name="urlimagg" />
                </div>
            </div>
            <button class="upload btn btn-primary btn-icon-text" style="background-color: #8f56cc;border:none" type="button" onclick="abc();" id="btnsubmit"> <i class="mdi mdi-file-check btn-icon-prepend"></i>Add theater</button>

        </form>
    </div>
    <div>
        <input type="text" id="searchInput" onkeyup="searchMovies()" placeholder="  Search for theater...">
    </div>

    <div class="tabledata">
        <div class="tabledatahead">
            <div style="width: 50px;text-align: center;">No</div>
            <div style="width: 200px;text-align: center;">Theater</div>
            <div style="width: 200px;text-align: center;">Location</div>
            <div style="width: 250px;text-align: center;">Theater Image</div>
            <div style="width: 100px;text-align: center;">Status</div>
            <div style="width: 100px;text-align: center;">Detail</div>
        </div>

        <div class="fulldata">
            @for (int i = 0; i < listtheater.Count; i++)
            {<div class="tabledatabo">
                    <div style="width: 50px;text-align: center;">@(i + 1)</div>
                    <div style="width: 200px;text-align: center;">
                        <div style="width: 100%; word-wrap: break-word; text-align: center">@listtheater[i].name</div>
                    </div>
                    <div style="width: 200px;text-align: center;">
                        <div style="width: 100%; word-wrap: break-word; text-align: center">@listtheater[i].location</div>
                    </div>
                    <div style="width: 250px;text-align: center;">
                        <img src="@listtheater[i].Theater_image" alt="Poster Image"
                             style="height:auto;width:250px">
                    </div>
                    <div style="width: 100px;text-align: center;">Active</div>
                    <div style="width:100px;text-align:center">
                        <a href="/Theater/Theater_detail?id=@listtheater[i].theater_id"
                           style="color: #ffffff; font-size: 15px; padding: 7px 20px; text-decoration: none; width: 100%; height: 30px;  border-radius: 5px;background-color: rgb(0, 190, 0);">Detail</a>
                    </div>

                </div>
            }
        </div>
    </div>
    <div style="width:100%;display:flex;justify-content:center; align-items:center">
        <div class="pagination" id="pagination">
            <!-- Pagination controls will be added dynamically by JavaScript -->
        </div>

        <div class="loading-overlay" id="loadingOverlay">
            <div class="loader"></div>
        </div>

    </div>
    <script>
        function validateForm() {
            var theatername = document.getElementById("theatername").value.trim();
            var location = document.getElementById("location").value.trim();
            var country = document.getElementById("country").value;
            const inp = document.querySelector('#image').files[0];

            if (theatername === '' || location === '' || country === '' || !inp) {
                return 0;

            }
            var inptype = inp.type;
            if (!inptype.startsWith('image/')) {

                return 1;
            }
            return 2;
        }
    </script>
    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyAULQ0nHsGhEO9t2EPmZlHlvqKhyExSx_g",
            authDomain: "movieticketbooking-7da83.firebaseapp.com",
            projectId: "movieticketbooking-7da83",
            storageBucket: "movieticketbooking-7da83.appspot.com",
            messagingSenderId: "66263933934",
            appId: "1:66263933934:web:17a4eae96f357a8a1724ff",
            measurementId: "G-G4SKDMJYN5"
        };
        firebase.initializeApp(firebaseConfig);
        let urlPath = "";
        async function uploadImage() {
            const inp = document.querySelector('#image').files[0];
            const urll = document.querySelector('#urlimagg');

            const storage = firebase.storage();
            const ref = storage.ref();
            const metadata = {
                contentType: inp.type
            };


            const uuid = generateUUID();
            const name = uuid + inp.name;
            const uploadImage = ref.child(name).put(inp, metadata);

            await uploadImage.then(snapshot => snapshot.ref.getDownloadURL())
                .then(url => {

                    urll.value = url;
                    urlPath = url;
                    console.log(urlPath);


                });
            return urlPath;
        }

        function deleteImag() {
            const old_url = document.getElementById('urlimagg').value;
            const storage = firebase.storage();
            // Create a reference to the image you want to delete
            const imageRef = storage.refFromURL(old_url);

            // Delete the image
            imageRef.delete().then(() => {
                console.log("Image deleted successfully.");
            }).catch((error) => {
                console.error("Error deleting image:", error);
            });
        }


        async function abc() {
            var check = validateForm();
            if (check == 2) {
                document.getElementById('loadingOverlay').style.display = 'flex';
                await uploadImage();

                document.getElementById('loadingOverlay').style.display = 'none';


                $.ajax({
                    url: '/Theater/Inserttheate',
                    type: "Post",
                    //contentType: "application/json",
                    data: {
                        theatername: $("#theatername").val(),
                        location: $("#location").val(),
                        city: $("#country").val(),
                        urlimag: $("#urlimagg").val(),
                    },
                    success: (response) => {
                        if (response == "True") {
                            swal({
                                title: "Add theater success",
                                text: "success",
                                timer: 2000,
                                buttons: false,

                            }).then(() => {
                                window.location.replace("https://localhost:44351/Theater/addnewtheater");
                            })
                        }
                        else {
                            deleteImag();
                            swal({
                                title: "Add movie fail",
                                text: "try again",
                                timer: 2000,
                                buttons: false,

                            })
                        }
                    }
                });
            } else if (check == 1) {
                swal({
                    title: "Pick only Image",
                    text: "try again",
                    timer: 2000,
                    icon: "error",
                    buttons: false,

                })
            } else if (check == 0) {
                swal({
                    title: "Please fill all field",
                    text: "try again",
                    timer: 2000,
                    icon: "error",
                    buttons: false,

                })
            }
        }



    </script>
    <script>

        function previewImage(event) {
            var input = event.target;
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function () {
                    var imagePreview = document.getElementById('imagePreview');
                    imagePreview.src = '';
                    imagePreview.src = reader.result;
                    imagePreview.style.display = 'block';
                }
                reader.readAsDataURL(event.target.files[0]);
            } else {
                imagePreview.src = '';
                imagePreview.style.display = 'none';
            }
        }


        function formaddtheater() {
            var x = document.getElementById("newtheater");

            if (x.style.display === "none") {
                x.style.display = "block";


            } else {
                x.style.display = "none";

            }
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const itemsPerPage = 5;
            const movieItems = document.querySelectorAll('.tabledatabo');
            const totalPages = Math.ceil(movieItems.length / itemsPerPage);
            let currentPage = 1;

            function showPage(page) {
                const startIndex = (page - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

                movieItems.forEach((item, index) => {
                    if (index >= startIndex && index <= endIndex) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            }

            function generatePagination() {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                const numPagesToShow = 2; // Number of pages to show before and after the current page
                const startPage = Math.max(1, currentPage - numPagesToShow);
                const endPage = Math.min(totalPages, currentPage + numPagesToShow);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLink = document.createElement('a');
                    pageLink.href = '#';
                    pageLink.textContent = i;
                    if (i === currentPage) {
                        pageLink.classList.add('active');
                    }
                    pageLink.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                        updatePagination();
                        generatePagination();
                    });
                    pagination.appendChild(pageLink);
                }
            }


            function updatePagination() {
                const pageLinks = document.querySelectorAll('.pagination a');
                pageLinks.forEach((link, index) => {
                    if (index + 1 === currentPage) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            showPage(currentPage);
            generatePagination();
        });
    </script>

    <script>
        function searchMovies() {
            debugger
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("searchInput");
            filter = input.value.toUpperCase();
            if (filter == "") {
                defaul();
            } else {
                table = document.getElementsByClassName("fulldata")[0];
                divs = table.getElementsByClassName("tabledatabo");
                for (i = 0; i < divs.length; i++) {
                    titleDiv = divs[i].getElementsByTagName("div")[1];
                    txtValue = titleDiv.textContent || titleDiv.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        divs[i].style.display = "";
                    } else {
                        divs[i].style.display = "none";
                    }
                }
            }
        }
        function defaul() {
            const itemsPerPage = 5;
            const movieItems = document.querySelectorAll('.tabledatabo');
            const totalPages = Math.ceil(movieItems.length / itemsPerPage);
            let currentPage = 1;

            function showPage(page) {
                const startIndex = (page - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

                movieItems.forEach((item, index) => {
                    if (index >= startIndex && index <= endIndex) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            }

            function generatePagination() {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                const numPagesToShow = 2; // Number of pages to show before and after the current page
                const startPage = Math.max(1, currentPage - numPagesToShow);
                const endPage = Math.min(totalPages, currentPage + numPagesToShow);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLink = document.createElement('a');
                    pageLink.href = '#';
                    pageLink.textContent = i;
                    if (i === currentPage) {
                        pageLink.classList.add('active');
                    }
                    pageLink.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                        updatePagination();
                        generatePagination();
                    });
                    pagination.appendChild(pageLink);
                }
            }


            function updatePagination() {
                const pageLinks = document.querySelectorAll('.pagination a');
                pageLinks.forEach((link, index) => {
                    if (index + 1 === currentPage) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            showPage(currentPage);
            generatePagination();
        };
    </script>

