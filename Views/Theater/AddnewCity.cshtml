
@{
    ViewBag.Title = "AddnewCity";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@model List<MovieTicketBooking.Models.City>

<style>
    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
    }

    .table-container {
        overflow-x: auto;
    }

    .pagination {
        margin-top: 20px; /* Adjust spacing as needed */
    }

        .pagination a {
            display: inline-block;
            padding: 5px 10px;
            margin-right: 5px;
            text-decoration: none;
            color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            transition: background-color 0.3s, color 0.3s;
        }

            .pagination a:hover {
                background-color: #f0f0f0;
            }

            .pagination a.active {
                background-color: #4c3896; /* Active page background color */
                color: #fff; /* Active page text color */
                border: none
            }

    .tabledatahead {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 20px 20px;
        background-color: #191c24;
        font-weight: bold;
        font-size: 18px
    }

    .tabledatabo {
        display: flex;
        height: auto;
        padding: 20px 20px;
        justify-content: space-evenly;
        align-items: center;
        font-size: 15px;
        background-color: #191c24;
        border-bottom: 1px solid grey;
    }

        .tabledatabo:hover {
            background-color: black
        }
</style>
<button class="btn btn-primary btn-xs" style="margin-left: 15px; margin-bottom: 10px; background-color: #8f56cc;border:none" onclick="myFunction()">Add City </button>

<div class="col-md-6 col-12" id="myDIV" style="display: none;">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title">Add City</h4>

        </div>
        <div class="card-content">
            <div class="card-body">
                <form class="form form-horizontal" method="post" action="/Theater/Insertcity">
                    <div class="form-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label style="color:white"> Name City</label>
                            </div>
                            <div class="col-md-8 form-group">
                                <input type="text" id="first-name" class="form-control" name="name"
                                       placeholder="Name City" required>
                            </div>


                            <div class="col-sm-12 d-flex justify-content-end">
                                <button type="submit" style="background-color: #8f56cc;border:none" class="btn btn-primary me-1 mb-1">Submit</button>
                                <button type="reset" class="btn btn-light-secondary me-1 mb-1">Reset</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div style="height:50px"></div>
<div>
    <div>
        <div class="tabledata">
            <div class="tabledatahead">
                <div style="width: 100px;text-align: center;">No</div>
                <div style="width: 200px;text-align: center;">City</div>
                <div style="width: 100px;text-align: center;">Edit</div>

            </div>

            <div class="fulldata">
                @for (int i = 0; i < Model.Count; i++)
                {<div class="tabledatabo">
                        <div style="width: 100px;text-align: center;">@(i + 1)</div>
                        <div style="width: 200px;text-align: center;">
                            <div style="width: 100%; word-wrap: break-word; text-align: center">@Model[i].title_city</div>
                        </div>
                        <div style="width: 100px;text-align: center;">
                            <a href="@Url.Action(" Editc", "Admin")?idc=@Model[i].id_city"
                               style="color: rgb(255, 255, 255); font-size: 15px; padding: 7px 20px; text-decoration: none; width: 100%; height: 30px; background-color:  rgb(228, 209, 0); border-radius: 5px ">Edit</a>
                        </div>

                    </div>

                }
            </div>
        </div>
    </div>
</div>
<div style="width:100%;display:flex;justify-content:center; align-items:center">
    <div class="pagination" id="pagination">
        <!-- Pagination controls will be added dynamically by JavaScript -->
    </div>
</div>
<script>
    function myFunction() {
        var x = document.getElementById("myDIV");
        var y = document.getElementById("myDI");
        var e = document.getElementById("e");
        var a = document.getElementById("a");
        if (x.style.display === "none") {
            x.style.display = "block";
            y.style.display = "none";
            e.style.backgroundColor = "#4B9FDB";
            a.style.backgroundColor = "#D5E0F0";
            e.style.color = "#000000";
            a.style.color = "#C2C4CC";

        } else {
            x.style.display = "none";
            y.style.display = "block";
            a.style.backgroundColor = "#4B9FDB";
            e.style.backgroundColor = "#D5E0F0";
            a.style.color = "#000000";
            e.style.color = "#C2C4CC";
        }
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const itemsPerPage = 5;
        const movieItems = document.querySelectorAll('.tabledatabo');
        const totalPages = Math.ceil(movieItems.length / itemsPerPage);
        let currentPage = 1;

        function showPage(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

            movieItems.forEach((item, index) => {
                if (index >= startIndex && index <= endIndex) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function generatePagination() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            const numPagesToShow = 2; // Number of pages to show before and after the current page
            const startPage = Math.max(1, currentPage - numPagesToShow);
            const endPage = Math.min(totalPages, currentPage + numPagesToShow);

            for (let i = startPage; i <= endPage; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    currentPage = i;
                    showPage(currentPage);
                    updatePagination();
                    generatePagination();
                });
                pagination.appendChild(pageLink);
            }
        }


        function updatePagination() {
            const pageLinks = document.querySelectorAll('.pagination a');
            pageLinks.forEach((link, index) => {
                if (index + 1 === currentPage) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        showPage(currentPage);
        generatePagination();
    });
</script>