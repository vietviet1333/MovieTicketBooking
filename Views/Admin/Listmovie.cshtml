@{
    ViewBag.Title = "Listmovie";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var listcity = MovieTicketBooking.Dao.TheaterDao.Instance().getAllCity();
}
@model List<MovieTicketBooking.Models.Movie>
<style>

    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
    }

    .table-container {
        overflow-x: auto;
    }

    .tabledatahead {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 20px 20px;
        background-color: #191c24;
        font-weight: bold;
        font-size: 18px
    }

    .tabledatabo {
        display: flex;
        height: auto;
        padding: 20px 20px;
        justify-content: space-evenly;
        align-items: center;
        font-size: 15px;
        background-color: #191c24;
        border-bottom: 1px solid grey;
    }

        .tabledatabo:hover {
            background-color: black
        }

    .truncate-overflow {
        --max-lines: 5;
        position: relative;
        overflow: hidden;
        padding-right: 1rem;
        max-width: 20%;
    }

    .pagination {
        margin-top: 20px; /* Adjust spacing as needed */
    }

        .pagination a {
            display: inline-block;
            padding: 5px 10px;
            margin-right: 5px;
            text-decoration: none;
            color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            transition: background-color 0.3s, color 0.3s;
        }

            .pagination a:hover {
                background-color: #f0f0f0;
            }

            .pagination a.active {
                background-color: #4c3896; /* Active page background color */
                color: #fff; /* Active page text color */
                border: none
            }
    ::placeholder {
        color: grey; /* Change this to your desired color */
    }
    #searchInput {
        margin: 20px 0px;
        background-color: black;
        border: 1px solid grey;
        color: white;
        height: 40px;
        border-radius: 5px;
    }
</style>

<body>
    <h1>Movie List</h1>
    <div>
        <input type="text" id="searchInput" onkeyup="searchMovies()" placeholder="  Search for movies...">
    </div>
    <div>
        <div class="tabledata">
            <div class="tabledatahead">
                <div style="width: 100px;text-align: center;">No</div>
                <div style="width: 200px;text-align: center;">Movie</div>
                <div style="width: 150px;text-align: center;">Release date</div>
                <div style="width: 250px;text-align: center;">Poster Image</div>
                <div style="width: 100px;text-align: center;">Status</div>
                <div style="width: 100px;text-align: center;">Edit</div>
                <div style="width: 100px;text-align: center;">Show time</div>
            </div>



            <div class="fulldata">
                @for (int i = 0; i < Model.Count; i++)
                {

                    String post = Model[i].release_date?.ToString("yyyy-MM-dd");
                    <div class="tabledatabo" data-namemovie="@Model[i].title">
                        <div style="width: 100px;text-align: center;">@i</div>
                        <div style="width: 200px;text-align: center;"><div style="width: 100%; word-wrap: break-word; text-align: center">@Model[i].title</div></div>
                        <div style="width: 150px;text-align: center;">@post</div>
                        <div style="width: 250px;text-align: center;"><img src="@Model[i].poster_image" alt="Poster Image" style="height:auto;width:100px"></div>
                        <div style="width: 100px;text-align: center;">Active</div>
                        @if (Model[i].status != 0)
                        {


                            <div style="width:100px;text-align:center"><a href="#" style="color: #8e8e8e; font-size: 15px; padding: 7px 20px; text-decoration: none; width: 100%; height: 30px; border: 1px solid #8e8e8e; border-radius: 5px ">Edit</a></div>
                        }
                        else
                        {
                            <div style="width:100px;text-align:center"><a href="#" style="color: #d0b400; font-size: 15px; padding: 7px 20px; text-decoration: none; width: 100%; height: 30px; border: 1px solid #d0b400; border-radius: 5px ">Edit</a></div>
                        }
                        <div style="width:100px;text-align:center"><a href="/Showtime/Addshowtime?id_movie=@Model[i].movie_id" style="color: #00a008; font-size: 15px; padding: 7px 20px; text-decoration: none; width: 100%; height: 30px; border: 1px solid #00a008; border-radius: 5px ">See</a></div>

                    </div>


                }
            </div>




        </div>
    </div>
    <div style="width:100%;display:flex;justify-content:center; align-items:center">
        <div class="pagination" id="pagination">
            <!-- Pagination controls will be added dynamically by JavaScript -->
        </div>

    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const itemsPerPage = 5;
            const movieItems = document.querySelectorAll('.tabledatabo');
            const totalPages = Math.ceil(movieItems.length / itemsPerPage);
            let currentPage = 1;

            function showPage(page) {
                const startIndex = (page - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

                movieItems.forEach((item, index) => {
                    if (index >= startIndex && index <= endIndex) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            }

            function generatePagination() {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                const numPagesToShow = 2; // Number of pages to show before and after the current page
                const startPage = Math.max(1, currentPage - numPagesToShow);
                const endPage = Math.min(totalPages, currentPage + numPagesToShow);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLink = document.createElement('a');
                    pageLink.href = '#';
                    pageLink.textContent = i;
                    if (i === currentPage) {
                        pageLink.classList.add('active');
                    }
                    pageLink.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                        updatePagination();
                        generatePagination();
                    });
                    pagination.appendChild(pageLink);
                }
            }


            function updatePagination() {
                const pageLinks = document.querySelectorAll('.pagination a');
                pageLinks.forEach((link, index) => {
                    if (index + 1 === currentPage) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            showPage(currentPage);
            generatePagination();
        });
    </script>
    
    <script>
        function searchMovies() {
            debugger
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("searchInput");
            filter = input.value.toUpperCase();
            if (filter == "") {
                defaul();
            } else {
                table = document.getElementsByClassName("fulldata")[0];
                divs = table.getElementsByClassName("tabledatabo");
                for (i = 0; i < divs.length; i++) {
                    titleDiv = divs[i].getElementsByTagName("div")[1];
                    txtValue = titleDiv.textContent || titleDiv.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        divs[i].style.display = "";
                    } else {
                        divs[i].style.display = "none";
                    }
                }
            }
        }
         function defaul () {
            const itemsPerPage = 5;
            const movieItems = document.querySelectorAll('.tabledatabo');
            const totalPages = Math.ceil(movieItems.length / itemsPerPage);
            let currentPage = 1;

            function showPage(page) {
                const startIndex = (page - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

                movieItems.forEach((item, index) => {
                    if (index >= startIndex && index <= endIndex) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            }

            function generatePagination() {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                const numPagesToShow = 2; // Number of pages to show before and after the current page
                const startPage = Math.max(1, currentPage - numPagesToShow);
                const endPage = Math.min(totalPages, currentPage + numPagesToShow);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLink = document.createElement('a');
                    pageLink.href = '#';
                    pageLink.textContent = i;
                    if (i === currentPage) {
                        pageLink.classList.add('active');
                    }
                    pageLink.addEventListener('click', function (event) {
                        event.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                        updatePagination();
                        generatePagination();
                    });
                    pagination.appendChild(pageLink);
                }
            }


            function updatePagination() {
                const pageLinks = document.querySelectorAll('.pagination a');
                pageLinks.forEach((link, index) => {
                    if (index + 1 === currentPage) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });
            }

            showPage(currentPage);
            generatePagination();
        };
    </script>

</body>