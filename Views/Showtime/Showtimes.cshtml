
@{
    ViewBag.Title = "Showtimes";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var showtimes = MovieTicketBooking.Dao.ShowtimeDao.Instance().getAllShowtime();
    var movies = MovieTicketBooking.Dao.MovieDao.Instance().GetAllMovies();
    var theaters = MovieTicketBooking.Dao.TheaterDao.Instance().GetTheaterHasRoom();

}
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>

<style>
    .swal-modal {
        background-color: #372945; /* Change this to your desired background color */
    }

    .swal-title {
        color: #89a4c4; /* Change this to your desired text color */
    }

    .swal-text {
        color: #9da0a3; /* Change this to your desired text color */
    }



    .swal-button {
        color: #28035e; /* Change this to your desired text color */
        background-color: #a075e0; /* Change this to your desired button background color */
    }



    body {
        font-family: Arial, sans-serif;
    }

    h1 {
        text-align: center;
    }

    .table-container {
        overflow-x: auto;
    }

    .tabledatahead {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 20px 20px;
        background-color: #191c24;
        font-weight: bold;
        font-size: 18px
    }

    .tabledatabo {
        display: flex;
        height: auto;
        padding: 20px 20px;
        justify-content: space-evenly;
        align-items: center;
        font-size: 15px;
        background-color: #191c24;
        border-bottom: 1px solid grey;
    }

        .tabledatabo:hover {
            background-color: black
        }


    img {
        max-width: 200px;
        height: auto;
        display: block;
        margin: 0 auto;
        border-radius: 20px;
        margin-top: 10px;
        margin-bottom: 10px
    }



    .truncate-overflow {
        --max-lines: 5;
        position: relative;
        overflow: hidden;
        padding-right: 1rem;
        max-width: 20%;
    }



    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Adjust the opacity here */
        display: none;
        justify-content: center;
        align-items: center;
        /* Ensure the loading overlay stays on top */
    }

    .loader {
        border: 8px solid #f3f3f3; /* Light grey */
        border-top: 8px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
    }




        .loader.active {
            display: block;
        }

    input[type="text"],
    input[type="date"],
    input[type="number"],
    textarea,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        font-size: 16px;
        color: aliceblue;
        background-color: #2A3038;
    }

    textarea {
        resize: vertical;
    }

    input[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

    #imagePreview {
        display: none;
        margin-top: 37px;
        border-radius: 10px;
    }

    .grid-container {
        display: grid;
        gap: 2px;
        /* Adjust gap between squares */
    }

    .grid-item {
        background-color: lightblue;
        /* Adjust square color */
        border: 1px solid darkblue;
        /* Adjust square border */
    }

    .pagination {
        margin-top: 20px; /* Adjust spacing as needed */
    }

        .pagination a {
            display: inline-block;
            padding: 5px 10px;
            margin-right: 5px;
            text-decoration: none;
            color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            transition: background-color 0.3s, color 0.3s;
        }

            .pagination a:hover {
                background-color: #f0f0f0;
            }

            .pagination a.active {
                background-color: #4c3896; /* Active page background color */
                color: #fff; /* Active page text color */
                border: none
            }

    #searchInput {
        margin: 20px 0px;
        background-color: black;
        border: 1px solid grey;
        color: white;
        height: 40px;
        border-radius: 5px;
    }
</style>
<button class="btn btn-primary btn-xs" style="margin-left: 15px; margin-bottom: 10px; color: #492173; background-color: #8f56cc; border: none" onclick="formaddroom()">Add Showtime </button>
<div id="newtheater" style="display: none; background-color: #1e1e27e3; border-radius: 10px; padding: 10px; ">

    <form method="post" action="/Showtime/Insertshowtime" id="myForm" enctype="multipart/form-data">
        <div>

            <div style="color:aliceblue; font-size:20px;font-weight:bold;margin-bottom:30px">Show timing</div>
            <div style="display:flex;justify-content:space-around">
                <div class="form-group" style="width:48%">
                    <label for="date" class="form-label">Movie</label>
                    <select class="form-control" id="country" name="movie_id" style="width: 100% ">

                        <option value="">Select Movie</option>
                        @for (int i = 0; i < movies.Count; i++)
                        {
                            <option value="@movies[i].movie_id" >@movies[i].title - @movies[i].duration minutes</option>
                        }

                    </select>
                </div>

                <div style="width:48%">
                  
                </div>
            </div>
            <div style="display:flex;justify-content:space-around ">

                <div class="form-group" style="width:48%">
                    <label for="date" class="form-label">Theater</label>
                    <select class="form-control" id="theaterSelect" name="theater_id" style="color:aliceblue">
                        <option value="">Select Theater</option>
                        @for (int i = 0; i < theaters.Count; i++)
                        {
                            <option value="@theaters[i].theater_id">@theaters[i].name</option>
                        }

                    </select>
                </div>
                <div id="roomContainer" style="width:48%">
                    <label for="date" class="form-label">Room</label>
                </div>


            </div>
            <div style="display:flex;justify-content:space-around">
                <div class="form-group" style="width:30%">
                    <label for="date" class="form-label">Date</label>
                    <input type="date" class="form-control" id="show_date" name="show_date">
                    <input type="text" id="starttime" name="starttime" hidden />
                    <input type="text" id="endtime" name="endtime" hidden />
                </div>
                <div class="form-group" style="width:30%">
                    <label for="time" class="form-label">Time Start</label>
                    <input type="time" class="form-control" id="a" step="60" min="00:00">

                </div>
                <div class="form-group" style="width:30%">
                    <label for="time" class="form-label">Time End</label>
                    <input type="time" class="form-control" id="b" step="60" max="23:59">
                    <input type="hidden" value="0" name="status" />
                </div>
            </div>
        </div>
        <button class="upload btn btn-primary btn-icon-text" type="button" onclick="checkshowtime()" style="margin-top: 30px; background-color: #8f56cc;border:none" id="btnsubmit"> <i class="mdi mdi-file-check btn-icon-prepend"></i>Save</button>

    </form>
</div>

<div style="margin-top:30px">
    <div>
        <input type="text" id="searchInput" onkeyup="searchMovies()" placeholder="  Search By Movie Name...">
    </div>
    <div class="tabledata">
        <div class="tabledatahead">
            <div style="width: 50px;text-align: center;">No</div>
            <div style="width: 200px;text-align: center;">Movie</div>
            <div style="width: 150px;text-align: center;">Theater</div>
            <div style="width: 100px;text-align: center;">Booked</div>
            <div style="width: 100px;text-align: center;">Show Date</div>
            <div style="width: 100px;text-align: center;">Start Time</div>
            <div style="width: 100px;text-align: center;">End Time</div>
            <div style="width: 100px;text-align: center;">Status</div>
            <div style="width: 100px;text-align: center;">Delete</div>
        </div>

        <div class="fulldata">

            @for (int i = 0; i < showtimes.Count; i++)
            {
                String post = showtimes[i].show_date?.ToString("yyyy-MM-dd"); String
              st = showtimes[i].starttime?.ToString("hh:mm tt"); String et = showtimes[i].endtime?.ToString("hh:mm tt"); var
              emtyseat = MovieTicketBooking.Dao.BookingDao.Instance().EmptySeatOfShowtime(showtimes[i].showtime_id);
                <div class="tabledatabo">
                    <div style="width: 50px;text-align: center;">@(i + 1)</div>
                    <div style="width: 200px;text-align: center;">
                        <div style="width: 100%; word-wrap: break-word; text-align: center">@showtimes[i].Movie.title</div>
                    </div>
                    <div style="width: 150px;text-align: center;">
                        <div style="width: 100%; word-wrap: break-word; text-align: center">
                            @showtimes[i].Theater.name
                            <br />(@showtimes[i].Room.room_name)
                        </div>
                    </div>
                    <div style="width: 100px;text-align: center;">
                        @emtyseat/@(showtimes[i].Room.number_column * showtimes[i].Room.number_row)
                    </div>
                    <div style="width: 100px;text-align: center;">@post</div>

                    <div style="width:100px;text-align:center"> @st </div>
                    <div style="width:100px;text-align:center">@et </div>
                    @if (showtimes[i].status == 0)
                    {
                        <div style="width:100px;text-align:center;color: #00a008">Comming </div>
                    }
                    else
                    {
                        <div style="width:100px;text-align:center; color: #d0b400">Ended </div>
                    }
                    <div style="width:100px;text-align:center">
                        <button type="button"
                                style="height: 40px; border: none; border-radius: 10px; background-color: #9a17e6; color: white; font-weight: bold;">
                            Delete
                        </button>
                    </div>

                </div>

            }
        </div>

    </div>
</div>
<div style="width:100%;display:flex;justify-content:center; align-items:center">
    <div class="pagination" id="pagination">
        <!-- Pagination controls will be added dynamically by JavaScript -->
    </div>

</div>

<script>
    function validateForm() {

        var theater = document.querySelector("#theaterSelect").value;
        var show = document.querySelector("#show_date").value;
        var start = document.querySelector("#a").value;
        var end = document.querySelector("#b").value;
        var movie = document.getElementById("country").value;

        if (theater === "" || show === "" || start === "" || end === "" || movie === "") {

            return 0;
        }

        if (new Date(show) < new Date()) {

            return 1;
        }
        if (start > end) {
            return 2;
        }

        return 3;


    }

    // Set minimum release date to today
    var today = new Date();
    today.setDate(today.getDate() + 1);
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();

    today = yyyy + '-' + mm + '-' + dd;
    document.getElementById('show_date').setAttribute('min', today);
</script>

<script>
    $('#theaterSelect').change(function () {
       
        var theaterId = $(this).val();
        $.ajax({
            url: '/Showtime/FetchRooms', // Controller action to fetch rooms
            type: 'GET',
            data: { theaterId: theaterId },
            success: function (response) {
                $('#roomContainer').html(response); // Display rooms in the container
            },
            error: function (xhr, status, error) {
                console.error(xhr.responseText);
            }
        });
    });
    function checkshowtime() {
        debugger

        var show = document.querySelector("#show_date").value;
        var start = document.querySelector("#a").value;
        var end = document.querySelector("#b").value;
        var a = show + " " + start;
        var b = show + " " + end;
        document.querySelector("#starttime").value = a;
        document.querySelector("#endtime").value = b;
        var checkForm = validateForm();
        if (checkForm == 3) {
            var room = document.querySelector("#room").value;
            $.ajax({
                url: '/Showtime/Checkshowtime',
                type: 'POST',
                data: {
                    room_id: room,
                    show_date: show,
                    starttime: a,
                    endtime: b
                },
                success: function (response) {

                    if (response == "True") {
                        swal({
                            title: "Success to add showtime",
                            text: "Show time has been added",
                            timer: 2000,
                            buttons: false,
                        });

                        $("#myForm").submit();



                    } else {
                        swal({
                            title: "Error to add showtime",
                            text: "Time overlap",
                            icon: "error",

                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        } else if (checkForm == 0) {
            swal({
                title: "Please fill all field",
                text: "",
                icon: "error",

            });
        } else if (checkForm == 1) {
            swal({
                title: "Error show date",
                text: "",
                icon: "error",

            });
        } else if (checkForm == 2) {
            swal({
                title: "Start time have to before end time",
                text: "",
                icon: "error",

            });
        }

    };
    function formaddroom() {
        var x = document.getElementById("newtheater");

        if (x.style.display === "none") {
            x.style.display = "block";


        } else {
            x.style.display = "none";

        }
    }

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const itemsPerPage = 5;
        const movieItems = document.querySelectorAll('.tabledatabo');
        const totalPages = Math.ceil(movieItems.length / itemsPerPage);
        let currentPage = 1;

        function showPage(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

            movieItems.forEach((item, index) => {
                if (index >= startIndex && index <= endIndex) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function generatePagination() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            const numPagesToShow = 2; // Number of pages to show before and after the current page
            const startPage = Math.max(1, currentPage - numPagesToShow);
            const endPage = Math.min(totalPages, currentPage + numPagesToShow);

            for (let i = startPage; i <= endPage; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    currentPage = i;
                    showPage(currentPage);
                    updatePagination();
                    generatePagination();
                });
                pagination.appendChild(pageLink);
            }
        }


        function updatePagination() {
            const pageLinks = document.querySelectorAll('.pagination a');
            pageLinks.forEach((link, index) => {
                if (index + 1 === currentPage) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        showPage(currentPage);
        generatePagination();
    });
</script>
<script>
    function searchMovies() {
        debugger
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        if (filter == "") {
            defaul();
        } else {
            table = document.getElementsByClassName("fulldata")[0];
            divs = table.getElementsByClassName("tabledatabo");
            for (i = 0; i < divs.length; i++) {
                titleDiv = divs[i].getElementsByTagName("div")[1];
                txtValue = titleDiv.textContent || titleDiv.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    divs[i].style.display = "";
                } else {
                    divs[i].style.display = "none";
                }
            }
        }
    }
    function defaul() {
        const itemsPerPage = 5;
        const movieItems = document.querySelectorAll('.tabledatabo');
        const totalPages = Math.ceil(movieItems.length / itemsPerPage);
        let currentPage = 1;

        function showPage(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, movieItems.length - 1);

            movieItems.forEach((item, index) => {
                if (index >= startIndex && index <= endIndex) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function generatePagination() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            const numPagesToShow = 2; // Number of pages to show before and after the current page
            const startPage = Math.max(1, currentPage - numPagesToShow);
            const endPage = Math.min(totalPages, currentPage + numPagesToShow);

            for (let i = startPage; i <= endPage; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    currentPage = i;
                    showPage(currentPage);
                    updatePagination();
                    generatePagination();
                });
                pagination.appendChild(pageLink);
            }
        }


        function updatePagination() {
            const pageLinks = document.querySelectorAll('.pagination a');
            pageLinks.forEach((link, index) => {
                if (index + 1 === currentPage) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        showPage(currentPage);
        generatePagination();
    };
</script>